import pandas as pd
import sqlite3
from mcp.server.fastmcp import FastMCP 
from databahn.mcp_servers.data.vulnerability import get_vulnerability_dataframe

conn = sqlite3.connect(':memory:')
df = get_vulnerability_dataframe()
df.to_sql('vulnerabilities', conn, index=False, if_exists='replace')


# --- Server Definition ---
mcp = FastMCP(name="VulnerabilityIntelServer")

@mcp.tool()
def get_vulnerability_intelligence(sql_query="SELECT * FROM vulnerabilities;"):
    """
    Queries the vulnerability intelligence feed using a SQL query for information about vulnerabilities and products
    input:
        sql_query: this is sql used to get data from the database.
        use the columns of the table mentioned below and generate the sql_query


    The database table 'vulnerabilities' contains the following columns:
    - cve_id (TEXT): The unique CVE identifier for the vulnerability.
    - product (TEXT): The product or software affected.
    - description (TEXT): A detailed description of the vulnerability.
    - cvss_score (REAL): The CVSS score indicating the severity.

    :param sql_query: A string containing the SQL query to execute.
    :return: A pandas DataFrame with the results of the query.
    """
    print(f"Executing SQL query on vulnerability data: {sql_query}")
    try:
        result_df = pd.read_sql_query(sql_query, conn)
        logger.info(f"results from vulnerabilities db are:", result_df)
    except Exception as e:
        print(f"Error executing SQL query: {e}")
        return pd.DataFrame()
    finally:
        conn.close()
        
    return result_df

@mcp.prompt()
def vulnerability_analysis_prompt():
    return "Analyze the provided CVEs and suggest prioritization based on CVSS score."

if __name__ == '__main__':
    mcp.run()